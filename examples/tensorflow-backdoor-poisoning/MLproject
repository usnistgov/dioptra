# This Software (Dioptra) is being made available as a public service by the
# National Institute of Standards and Technology (NIST), an Agency of the United
# States Department of Commerce. This software was developed in part by employees of
# NIST and in part by NIST contractors. Copyright in portions of this software that
# were developed by NIST contractors has been licensed or assigned to NIST. Pursuant
# to Title 17 United States Code Section 105, works of NIST employees are not
# subject to copyright protection in the United States. However, NIST may hold
# international copyright in software created by its employees and domestic
# copyright (or licensing rights) in portions of software that were assigned or
# licensed to NIST. To the extent that NIST holds copyright in this software, it is
# being made available under the Creative Commons Attribution 4.0 International
# license (CC BY 4.0). The disclaimers of the CC BY 4.0 license apply to all parts
# of the software developed or licensed by NIST.
#
# ACCESS THE FULL CC BY 4.0 LICENSE HERE:
# https://creativecommons.org/licenses/by/4.0/legalcode
name: imagenet-resnet50-fgm

entry_points:
  gen_poison_data:
    parameters:
      data_dir: {type: path, default: "/nfs/data"}
      image_size: {type: string, default: "28,28,1"}
      adv_tar_name: { type: string, default: "adversarial_poison.tar.gz" }
      adv_data_dir: { type: string, default: "adv_poison_data" }
      target_class: {type: string, default: "0"}
      batch_size: {type: int, default: 30}
      seed: {type: float, default: -1}
      poison_fraction: {type: float, default: 1}
      label_type: {type: string, default: "test"}
    command: >
      python src/gen_poison_data.py
      --data-dir {data_dir}
      --image-size {image_size}
      --adv-tar-name {adv_tar_name}
      --adv-data-dir {adv_data_dir}
      --target-class {target_class}
      --batch-size {batch_size}
      --seed {seed}
      --poison-fraction {poison_fraction}
      --label-type {label_type}

  deploy_poison:
    parameters:
      run_id: {type: string}
      data_dir: {type: path, default: "/nfs/data"}
      poison_deployment_method: {type: string, default: "add"}
      num_poisoned_images: {type: int, default: -1}
      adv_tar_name: { type: string, default: "adversarial_poison.tar.gz" }
      adv_data_dir: { type: string, default: "adv_poison_data" }
      poison_tar_name: { type: string, default: "adversarial_poison_dataset.tar.gz" }
      poison_data_dir: { type: string, default: "adv_poison_dataset" }
      seed: {type: float, default: -1}
    command: >
      python src/deploy_poison.py
      --run-id {run_id}
      --data-dir {data_dir}
      --adv-tar-name {adv_tar_name}
      --adv-data-dir {adv_data_dir}
      --poison-tar-name {poison_tar_name}
      --poison-data-dir {poison_data_dir}
      --poison-deployment-method {poison_deployment_method}
      --num-poisoned-images {num_poisoned_images}
      --seed {seed}

  spatial_smoothing:
    parameters:
      data_dir: { type: path, default: "/nfs/data" }
      image_size: { type: string, default: "28,28,1" }
      def_tar_name: { type: string, default: "spatial_smoothing_dataset.tar.gz" }
      def_data_dir: { type: string, default: "adv_testing" }
      batch_size: { type: float, default: 32 }
      spatial_smoothing_window_size: {type: int, default: 3}
      spatial_smoothing_apply_fit: {type: string, default: "false"}
      spatial_smoothing_apply_predict: {type: string, default: "true"}
      load_dataset_from_mlruns: {type: string, default: "false"}
      dataset_run_id: {type: string, default: "none"}
      dataset_tar_name: {type: string, default: "none"}
      dataset_name: {type: string, default: "none"}
      seed: { type: float, default: -1 }
    command: >
      python src/spatial_smoothing.py
      --data-dir {data_dir}
      --image-size {image_size}
      --def-tar-name {def_tar_name}
      --def-data-dir {def_data_dir}
      --batch-size {batch_size}
      --spatial-smoothing-window-size {spatial_smoothing_window_size}
      --spatial-smoothing-apply-fit {spatial_smoothing_apply_fit}
      --spatial-smoothing-apply-predict {spatial_smoothing_apply_predict}
      --load-dataset-from-mlruns {load_dataset_from_mlruns}
      --dataset-run-id {dataset_run_id}
      --dataset-tar-name {dataset_tar_name}
      --dataset-name {dataset_name}
      --seed {seed}

  jpeg_compression:
    parameters:
      data_dir: { type: path, default: "/nfs/data" }
      image_size: { type: string, default: "28,28,1" }
      def_tar_name: { type: string, default: "jpeg_compression_dataset.tar.gz" }
      def_data_dir: { type: string, default: "adv_testing" }
      batch_size: { type: float, default: 32 }
      jpeg_compression_channels_first: {type: string, default: "false"}
      jpeg_compression_quality: {type: int, default: 50}
      jpeg_compression_apply_fit: {type: string, default: "false"}
      jpeg_compression_apply_predict: {type: string, default: "true"}
      load_dataset_from_mlruns: {type: string, default: "false"}
      dataset_run_id: {type: string, default: "none"}
      dataset_tar_name: {type: string, default: "none"}
      dataset_name: {type: string, default: "none"}
      seed: { type: float, default: -1 }
    command: >
      python src/jpeg_compression.py
      --data-dir {data_dir}
      --image-size {image_size}
      --def-tar-name {def_tar_name}
      --def-data-dir {def_data_dir}
      --batch-size {batch_size}
      --jpeg-compression-channels-first {jpeg_compression_channels_first}
      --jpeg-compression-quality {jpeg_compression_quality}
      --jpeg-compression-apply-fit {jpeg_compression_apply_fit}
      --jpeg-compression-apply-predict {jpeg_compression_apply_predict}
      --load-dataset-from-mlruns {load_dataset_from_mlruns}
      --dataset-run-id {dataset_run_id}
      --dataset-tar-name {dataset_tar_name}
      --dataset-name {dataset_name}
      --seed {seed}

  gaussian_augmentation:
    parameters:
      data_dir: { type: path, default: "/nfs/data" }
      image_size: { type: string, default: "28,28,1" }
      def_tar_name: { type: string, default: "gaussian_augmentation_dataset.tar.gz" }
      def_data_dir: { type: string, default: "adv_testing" }
      batch_size: { type: float, default: 32 }
      gaussian_augmentation_perform_data_augmentation: {type: string, default: "false"}
      gaussian_augmentation_ratio: {type: float, default: 1}
      gaussian_augmentation_sigma: {type: float, default: 1}
      gaussian_augmentation_apply_fit: {type: string, default: "false"}
      gaussian_augmentation_apply_predict: {type: string, default: "true"}
      load_dataset_from_mlruns: {type: string, default: "false"}
      dataset_run_id: {type: string, default: "none"}
      dataset_tar_name: {type: string, default: "none"}
      dataset_name: {type: string, default: "none"}
      seed: { type: float, default: -1 }
    command: >
      python src/gaussian_augmentation.py
      --data-dir {data_dir}
      --image-size {image_size}
      --def-tar-name {def_tar_name}
      --def-data-dir {def_data_dir}
      --batch-size {batch_size}
      --gaussian-augmentation-perform-data-augmentation {gaussian_augmentation_perform_data_augmentation}
      --gaussian-augmentation-ratio {gaussian_augmentation_ratio}
      --gaussian-augmentation-sigma {gaussian_augmentation_sigma}
      --gaussian-augmentation-apply-fit {gaussian_augmentation_apply_fit}
      --gaussian-augmentation-apply-predict {gaussian_augmentation_apply_predict}
      --load-dataset-from-mlruns {load_dataset_from_mlruns}
      --dataset-run-id {dataset_run_id}
      --dataset-tar-name {dataset_tar_name}
      --dataset-name {dataset_name}
      --seed {seed}


  infer:
    parameters:
      run_id: { type: string }
      image_size: { type: string, default: "28,28,1" }
      model_name: { type: string, default: "mnist_le_net" }
      model_version: { type: string, default: "1" }
      batch_size: { type: float, default: 32 }
      adv_tar_name: { type: string, default: "testing_adversarial_fgm.tar.gz" }
      adv_data_dir: { type: string, default: "adv_testing" }
      imagenet_preprocessing: { type: string, default: "false"}
      seed: { type: float, default: -1 }
    command: >
      python src/infer.py
      --run-id {run_id}
      --image-size {image_size}
      --model-name {model_name}
      --model-version {model_version}
      --batch-size {batch_size}
      --adv-tar-name {adv_tar_name}
      --adv-data-dir {adv_data_dir}
      --imagenet-preprocessing {imagenet_preprocessing}
      --seed {seed}

  gen_poison_model:
    parameters:
      data_dir_testing: { type: path, default: "/nfs/data" }
      data_dir_training: { type: path, default: "/nfs/data" }
      image_size: { type: string, default: "28,28,1" }
      model_architecture: { type: string, default: "le_net" }
      epochs: { type: float, default: 30 }
      batch_size: { type: float, default: 32 }
      register_model_name: { type: string, default: "" }
      learning_rate: { type: float, default: 0.001 }
      optimizer: { type: string, default: "Adam" }
      validation_split: { type: float, default: 0.2 }
      imagenet_preprocessing: { type: string, default: "false"}
      load_dataset_from_mlruns: {type: string, default: "False"}
      dataset_run_id_testing: {type: string, default: ""}
      dataset_run_id_training: {type: string, default: ""}
      adv_tar_name: { type: string, default: "adversarial_patch_dataset.tar.gz" }
      adv_data_dir: { type: string, default: "adv_patch_dataset" }
      target_class_id: {type: int, default: 1}
      feature_layer_index: {type: int, default: 6}
      discriminator_layer_1_size: {type: int, default: 256}
      discriminator_layer_2_size: {type: int, default: 128}
      regularization_factor: {type: float, default: 30.0}
      poison_fraction: {type: float, default: 0.10}
      seed: { type: float, default: -1 }
    command: >
      python src/gen_poison_model.py
      --data-dir-testing {data_dir_testing}
      --data-dir-training {data_dir_training}
      --image-size {image_size}
      --model-architecture {model_architecture}
      --epochs {epochs}
      --batch-size {batch_size}
      --register-model-name {register_model_name}
      --learning-rate {learning_rate}
      --optimizer {optimizer}
      --validation-split {validation_split}
      --imagenet-preprocessing {imagenet_preprocessing}
      --load-dataset-from-mlruns {load_dataset_from_mlruns}
      --dataset-run-id-testing {dataset_run_id_testing}
      --dataset-run-id-training {dataset_run_id_training}
      --adv-tar-name {adv_tar_name}
      --adv-data-dir {adv_data_dir}
      --target-class-id {target_class_id}
      --feature-layer-index {feature_layer_index}
      --discriminator-layer-1-size {discriminator_layer_1_size}
      --discriminator-layer-2-size {discriminator_layer_2_size}
      --regularization-factor {regularization_factor}
      --poison-fraction {poison_fraction}
      --seed {seed}

  train_madry_pgd:
    parameters:
      data_dir_testing: { type: path, default: "/nfs/data" }
      data_dir_training: { type: path, default: "/nfs/data" }
      image_size: { type: string, default: "28,28,1" }
      model_architecture: { type: string, default: "le_net" }
      epochs: { type: float, default:10 }
      batch_size: { type: float, default: 32 }
      register_model_name: { type: string, default: "" }
      learning_rate: { type: float, default: 0.001 }
      eps: { type: float, default: 0.15 }
      eps_step: { type: float, default: 0.001 }
      optimizer: { type: string, default: "Adam" }
      validation_split: { type: float, default: 0.2 }
      imagenet_preprocessing: { type: string, default: "false"}
      load_dataset_from_mlruns: {type: string, default: "False"}
      dataset_run_id_testing: {type: string, default: ""}
      dataset_run_id_training: {type: string, default: ""}
      adv_tar_name: { type: string, default: "adversarial_patch_dataset.tar.gz" }
      adv_data_dir: { type: string, default: "adv_patch_dataset" }
      seed: { type: float, default: -1 }
    command: >
      python src/train_with_madry_pgd_defense.py
      --data-dir-testing {data_dir_testing}
      --data-dir-training {data_dir_training}
      --image-size {image_size}
      --model-architecture {model_architecture}
      --epochs {epochs}
      --batch-size {batch_size}
      --register-model-name {register_model_name}
      --eps {eps}
      --eps-step {eps_step}
      --learning-rate {learning_rate}
      --optimizer {optimizer}
      --validation-split {validation_split}
      --imagenet-preprocessing {imagenet_preprocessing}
      --load-dataset-from-mlruns {load_dataset_from_mlruns}
      --dataset-run-id-testing {dataset_run_id_testing}
      --dataset-run-id-training {dataset_run_id_training}
      --adv-tar-name {adv_tar_name}
      --adv-data-dir {adv_data_dir}
      --seed {seed}

  train:
    parameters:
      data_dir_testing: { type: path, default: "/nfs/data" }
      data_dir_training: { type: path, default: "/nfs/data" }
      image_size: { type: string, default: "28,28,1" }
      model_architecture: { type: string, default: "le_net" }
      epochs: { type: float, default:10 }
      batch_size: { type: float, default: 32 }
      register_model_name: { type: string, default: "" }
      learning_rate: { type: float, default: 0.001 }
      optimizer: { type: string, default: "Adam" }
      validation_split: { type: float, default: 0.2 }
      imagenet_preprocessing: { type: string, default: "false"}
      load_dataset_from_mlruns: {type: string, default: "False"}
      dataset_run_id_testing: {type: string, default: ""}
      dataset_run_id_training: {type: string, default: ""}
      adv_tar_name: { type: string, default: "adversarial_patch_dataset.tar.gz" }
      adv_data_dir: { type: string, default: "adv_patch_dataset" }
      seed: { type: float, default: -1 }
    command: >
      python src/train.py
      --data-dir-testing {data_dir_testing}
      --data-dir-training {data_dir_training}
      --image-size {image_size}
      --model-architecture {model_architecture}
      --epochs {epochs}
      --batch-size {batch_size}
      --register-model-name {register_model_name}
      --learning-rate {learning_rate}
      --optimizer {optimizer}
      --validation-split {validation_split}
      --imagenet-preprocessing {imagenet_preprocessing}
      --load-dataset-from-mlruns {load_dataset_from_mlruns}
      --dataset-run-id-testing {dataset_run_id_testing}
      --dataset-run-id-training {dataset_run_id_training}
      --adv-tar-name {adv_tar_name}
      --adv-data-dir {adv_data_dir}
      --seed {seed}

  init_model:
    parameters:
      data_dir: { type: path, default: "/nfs/data" }
      image_size: { type: string, default: "28,28,1" }
      model_architecture: { type: string, default: "le_net" }
      batch_size: { type: float, default: 32 }
      register_model_name: { type: string, default: "" }
      learning_rate: { type: float, default: 0.001 }
      optimizer: { type: string, default: "Adam" }
      imagenet_preprocessing: { type: string, default: "false"}
      seed: { type: float, default: -1 }
    command: >
      python src/init_model.py
      --data-dir {data_dir}
      --image-size {image_size}
      --model-architecture {model_architecture}
      --batch-size {batch_size}
      --register-model-name {register_model_name}
      --learning-rate {learning_rate}
      --optimizer {optimizer}
      --imagenet-preprocessing {imagenet_preprocessing}
      --seed {seed}

  gen_poison_clean_data:
    parameters:
      data_dir: { type: path, default: "/nfs/data" }
      image_size: { type: string, default: "28,28,1" }
      adv_tar_name: { type: string, default: "adversarial_poison.tar.gz" }
      adv_data_dir: { type: string, default: "adv_poison_data" }
      model_name: { type: string, default: "mnist_le_net" }
      model_version: { type: string, default: "1" }
      batch_size: { type: float, default: 32 }
      poison_fraction: {type: float, default: 1}
      label_type: {type: string, default: "test"}
      target_index: { type: int, default: -1 }
      imagenet_preprocessing: { type: string, default: "false"}
      eps: { type: float, default: 50 }
      eps_step: { type: float, default: 0.1 }
      norm: { type: string, default: "2" }
      seed: { type: float, default: -1 }
    command: >
      python src/gen_poison_clean_data.py
      --data-dir {data_dir}
      --image-size {image_size}
      --adv-tar-name {adv_tar_name}
      --adv-data-dir {adv_data_dir}
      --model-name {model_name}
      --model-version {model_version}
      --batch-size {batch_size}
      --poison-fraction {poison_fraction}
      --label-type {label_type}
      --target-index {target_index}
      --imagenet-preprocessing {imagenet_preprocessing}
      --eps {eps}
      --eps-step {eps_step}
      --norm {norm}
      --seed {seed}

types:
  callback:
  dataloader:
  directoryiterator:
  functiontype:
  kerasclassifier:
  metric:
  mlflowrun:
  tuple:
  model:
  modelversion:
  np.ndarray:
  optimizer:
  path:
  dataframe:
  rngenerator:
  sequential:
  tarfile:
  list_tuple_string_any:
    list: tuple_string_any
  list_union_metric_functiontype:
    list: union_metric_functiontype
  list_union_string_path:
    list: union_string_path
  list_mapping_string_string:
    list: mapping_string_string
  mapping_string_any:
    mapping: [string, any]
  mapping_string_number:
    mapping: [string, number]
  mapping_string_string:
    mapping: [string, string]
  tuple_integer_integer:
    tuple: [integer, integer]
  tuple_integer_integer_integer:
    tuple: [integer, integer, integer]
  tuple_string_any:
    tuple: [string, any]
  union_integer_number_string:
    union: [integer, number, string]
  union_integer_any:
    union: [integer, any]
  union_metric_functiontype:
    union: [metric, functiontype]
  union_null_list_tuple_string_any:
    union: [list_tuple_string_any , "null"]
  union_null_mapping_string_any:
    union: [mapping_string_any, "null"]
  union_null_modelversion:
    union: [modelversion, "null"]
  union_null_number:
    union: [number, "null"]
  union_null_string:
    union: [string, "null"]
  union_null_union_integer_any:
    union: [union_integer_any, "null"]
  union_string_path:
    union: [string, path]
  union_null_union_string_path:
    union: [union_string_path, "null"]
parameters:
  training_dir: /dioptra/data/Mnist/training
  testing_dir: /dioptra/data/Mnist/testing
  image_size: [28, 28, 1]
  model_name: le_net
  model_version: 1
  batch_size: 32
  attack_model_type: nn
  split: 0.5
  balance_sets: true
  seed: -1

tasks:
  init_rng:
    plugin: dioptra_builtins.random.rng.init_rng
    inputs:
      - name: seed
        type: integer
        required: false
    outputs:
      - seed: integer
      - rng: rngenerator

  draw_random_integer:
    plugin: dioptra_builtins.random.sample.draw_random_integer
    inputs:
      - rng: rngenerator
      - name: low
        type: integer
        required: false
      - name: high
        type: integer
        required: false
    outputs:
      value: integer

  log_parameters:
    plugin: dioptra_builtins.tracking.mlflow.log_parameters
    inputs:
      - parameters: mapping_string_number

  create_image_dataset: 
    plugin: dioptra_custom.pytorch_mi.data_pytorch.create_image_dataset
    inputs: 
      - data_dir: string
      - image_size: tuple_integer_integer_integer
      - seed: integer
      - name: validation_split
        type: union_null_number
        required: false
      - name: batch_size
        type: integer
        required: false
      - name: label_mode
        type: string
        required: false
    outputs:
      - dataset_a: dataloader
      - dataset_b: dataloader

  load_pytorch_classifier:
    inputs:
      - name: name 
        type: string
      - version: integer
    outputs:
      ret: sequential
    plugin: dioptra_custom.pytorch_mi.registry_mlflow_pytorch.load_pytorch_classifier  

  infer_membership:
    inputs:
      - training_ds: dataloader
      - testing_ds: dataloader
      - model: any
      - name: attack_type
        required: false
        type: string
      - name: split
        required: false
        type: number
      - name: balance_sets
        required: false
        type: boolean
      - name: image_size
        required: false
        type: tuple_integer_integer_integer
    plugin: dioptra_custom.pytorch_mi.membership_inference.infer_membership
graph:
  init_rng:
    init_rng: $seed

  dataset_seed:
    draw_random_integer: $init_rng.rng

  log_mlflow_params_result:
    log_parameters:
      - entry_point_seed: $seed
        dataset_seed: $dataset_seed

  create_image_dataset_train:
    create_image_dataset:
      data_dir: $training_dir
      batch_size: $batch_size
      seed: $dataset_seed
      image_size: $image_size
  
  create_image_dataset_test:
    create_image_dataset:
      data_dir: $testing_dir
      batch_size: $batch_size
      seed: $dataset_seed
      image_size: $image_size

  model:
    load_pytorch_classifier:
      name: $model_name
      version: $model_version

  out:
    infer_membership:
      training_ds: $create_image_dataset_train.dataset_a
      testing_ds: $create_image_dataset_test.dataset_a
      model: $model
      attack_type: $attack_model_type
      split: $split
      balance_sets: $balance_sets
      image_size: $image_size
    dependencies: [create_image_dataset_train, create_image_dataset_test, model]


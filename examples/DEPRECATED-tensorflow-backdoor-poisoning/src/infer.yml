types:
  rng:
  path:
  sequential:
  number_null:
    union: [number, "null"]
  string_null:
    union: [string, "null"]
  path_string:
    union: [string, path]
  path_string_null:
    union: [path_string, "null"]
  dirs:
    list: path_string
  directory_iterator:
  parameters:
    mapping: [string, number]
  kwargs:
    mapping: [string, any]
  kwargs_null:
    union: [kwargs, "null"]
  keras_classifier:
  eval_metric:
    mapping: [string, any]
  eval_metric_results:
    mapping: [string, number]
  dataframe:
  image_size:
    tuple: [integer, integer, integer]
  norm:
    union: [integer, number, string]

parameters:
  run_id: ""
  image_size: [28, 28, 1]
  adv_tar_name: testing_adversarial_fgm.tar.gz
  adv_data_dir: adv_testing
  imagenet_preprocessing: false
  batch_size: 32
  model_name: mnist_le_net
  model_version: 1
  seed: -1

tasks:
  init_rng:
    plugin: dioptra_builtins.random.rng.init_rng
    inputs:
      - name: seed
        type: integer
        required: false
    outputs:
      - seed: integer
      - rng: rng

  draw_random:
    plugin: dioptra_builtins.random.sample.draw_random_integer
    inputs:
      - rng: rng
      - name: low
        type: integer
        required: false
      - name: high
        type: integer
        required: false
    outputs:
      value: integer

  select_rescale_value:
    inputs:
    - imagenet_preprocessing: boolean
    outputs:
      ret: number
    plugin: dioptra_custom.custom_poisoning_plugins.datasetup.select_rescale_value

  init_tensorflow:
    plugin: dioptra_builtins.backend_configs.tensorflow.init_tensorflow
    inputs:
      - seed: integer

  log_params:
    plugin: dioptra_builtins.tracking.mlflow.log_parameters
    inputs:
      - parameters: parameters

  download_artifacts:
    plugin: dioptra_builtins.artifacts.mlflow.download_all_artifacts_in_run
    inputs:
      - run_id: string
      - artifact_path: string
      - name: destination_path
        type: string_null
        required: false
    outputs:
      download_path: string

  extract_tarfile:
    plugin: dioptra_builtins.artifacts.utils.extract_tarfile
    inputs:
      - filepath: path_string
      - name: tarball_read_mode
        type: string
        required: false
      - name: output_dir
        type: any
        required: false

  create_image_dataset:
    inputs:
    - data_dir: string
    - subset: string_null
    - image_size: image_size
    - seed: integer
    - name: rescale
      required: false
      type: number
    - name: validation_split
      required: false
      type: number_null
    - name: batch_size
      required: false
      type: integer
    - name: label_mode
      required: false
      type: string
    - name: imagenet_preprocessing
      required: false
      type: boolean
    outputs:
      ret: directory_iterator
    plugin: dioptra_custom.custom_poisoning_plugins.data_tensorflow.create_image_dataset

  load_classifier:
    plugin: dioptra_builtins.registry.mlflow.load_tensorflow_keras_classifier
    inputs:
      - name: name
        type: string
        required: true
      - version: integer
    outputs:
      classifier: sequential

  evaluate_metrics:
    plugin: dioptra_custom.evaluation.tensorflow.evaluate_metrics_tensorflow
    inputs:
      - classifier: any
      - dataset: any
    outputs:
      metrics: eval_metric_results
  log_results:
    plugin: dioptra_builtins.tracking.mlflow.log_metrics
    inputs:
      - metrics: eval_metric_results

  prepend_cwd:
    plugin:
      dioptra_custom.evaluation.mlflow.prepend_cwd
    inputs:
      - path: string
    outputs: 
      ret: string

graph:
  init_rng:
    init_rng: $seed

  tensorflow_global_seed:
    draw_random: $init_rng.rng

  dataset_seed:
    draw_random: $init_rng.rng

  init_tensorflow_results:
    init_tensorflow: $tensorflow_global_seed
  
  adv_data_dir_path: 
    prepend_cwd: $adv_data_dir

  rescale:
    select_rescale_value: $imagenet_preprocessing

  log_mlflow_params_result:
    log_params:
      - entry_point_seed: $seed
        tensorflow_global_seed: $tensorflow_global_seed
        dataset_seed: $dataset_seed
        rescale: $rescale

  adv_tar_path:
    download_artifacts:
      run_id: $run_id
      artifact_path: $adv_tar_name

  extract_tarfile_results:
    extract_tarfile:
      filepath: $adv_tar_path

  adv_ds:
    create_image_dataset:
      data_dir: $adv_data_dir_path
      subset: null
      validation_split: null
      image_size: $image_size
      rescale: $rescale
      imagenet_preprocessing: $imagenet_preprocessing
      seed: $dataset_seed
      batch_size: $batch_size
    dependencies:
      - init_tensorflow_results
      - extract_tarfile_results

  classifier:
    load_classifier:
      name: $model_name
      version: $model_version
    dependencies:
      - init_tensorflow_results
      - adv_ds

  classifier_performance_metrics:
    evaluate_metrics:
      classifier: $classifier
      dataset: $adv_ds
    dependencies:
      - classifier

  logged_metrics:
    log_results:
      metrics: $classifier_performance_metrics
    dependencies:
      - classifier_performance_metrics

[[plugins]]
path = "plugins/hello_world"
description = "A simple plugin used for testing and demonstration purposes."


  [[plugins.tasks]]
  filename = "tasks.py"
  name = "hello"
  input_params = [ { name = "name", type = "string", required = true} ]
  output_params = [ { name = "greeting", type = "message" } ]

  [[plugins.tasks]]
  filename = "tasks.py"
  name = "greet"
  input_params = [
    { name = "greeting", type = "string", required = true },
    { name = "name", type = "string", required = true },
  ]
  output_params = [ { name = "greeting", type = "message" } ]

  [[plugins.tasks]]
  filename = "tasks.py"
  name = "shout"
  input_params = [ { name = "greeting", type = "message", required = true} ]
  output_params = [ { name = "loud_greeting", type = "message" } ]

[[plugins]]
path = "plugins/mnist_demo"
description = "A collection of plugins for training an MNIST classifier and running an attack and several defenses."

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "load_dataset"
  input_params = [ 
    { name = "ep_seed", type = "integer", required = false},
    { name = "training_dir", type = "string", required = false },
    { name = "testing_dir", type = "string", required = false },
    { name = "subsets", type = "list_str", required = false },
    { name = "image_size", type = "tuple_int_int_int", required = false },
    { name = "validation_split", type = "null_num", required = false },
    { name = "rescale", type = "number", required = false },
    { name = "batch_size", type = "integer", required = false },
    { name = "label_mode", type = "string", required = false },
    { name = "shuffle", type = "boolean", required = false }
  ]
  output_params = [ 
    { name = "training", type = "dataset" },
    { name = "validation", type = "dataset" },
    { name = "testing", type = "dataset" }
  ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "create_model"
  input_params = [ 
    { name = "dataset", type = "dataset", required = false},
    { name = "model_architecture", type = "string", required = false },
    { name = "input_shape", type = "tuple_int_int_int", required = false },
    { name = "loss", type = "string", required = false },
    { name = "learning_rate", type = "number", required = false },
    { name = "optimizer", type = "string", required = false },
    { name = "metrics_list", type = "null_metric_name_list", required = false },
  ]
  output_params = [ { name = "output", type = "model" } ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "load_model"
  input_params = [ 
    { name = "model_name", type = "null_str", required = false},
    { name = "model_version", type = "null_int", required = false },
    { name = "imagenet_preprocessing", type = "boolean", required = false },
    { name = "art", type = "boolean", required = false },
    { name = "image_size", type = "tuple_int_int_int", required = false },
    { name = "classifier_kwargs", type = "null_mapping_str_any", required = false },
  ]
  output_params = [ { name = "output", type = "model" } ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "train"
  input_params = [ 
    { name = "estimator", type = "model", required = true},
    { name = "x", type = "dataset", required = false },
    { name = "y", type = "any", required = false },
    { name = "callbacks_list", type = "null_callback_list", required = false },
    { name = "fit_kwargs", type = "null_mapping_str_any", required = false },
  ]
  output_params = [ { name = "output", type = "model" } ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "save_artifacts_and_models"
  input_params = [ 
    { name = "artifacts", type = "null_list_mapping_str_any", required = false},
    { name = "models", type = "null_list_mapping_str_str_model", required = false },
  ]
  output_params = [ ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "load_artifacts_for_job"
  input_params = [ 
    { name = "job_id", type = "string", required = true},
    { name = "files", type = "null_list_str", required = false },
    { name = "extract_files", type = "null_list_str", required = false },
  ]
  output_params = [ { name = "output", type = "list_str" } ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "load_artifacts"
  input_params = [ 
    { name = "artifact_ids", type = "null_list_int", required = false},
    { name = "extract_files", type = "null_list_str", required = false },
  ]
  output_params = [ ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "attack_fgm"
  input_params = [ 
    { name = "dataset", type = "dataset", required = true},
    { name = "adv_data_dir", type = "str_path", required = true },
    { name = "classifier", type = "model", required = true },
    { name = "distance_metrics", type = "list_mapping_str_str", required = false },
    { name = "batch_size", type = "integer", required = false },
    { name = "eps", type = "number", required = false },
    { name = "eps_step", type = "number", required = false },
    { name = "minimal", type = "boolean", required = false },
    { name = "norm", type = "int_float_str", required = false },
  ]
  output_params = [ { name = "output", type = "dataframe" } ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "attack_patch"
  input_params = [ 
    { name = "data_flow", type = "dataset", required = true},
    { name = "adv_data_dir", type = "str_path", required = true },
    { name = "model", type = "model", required = true },
    { name = "patch_target", type = "integer", required = true },
    { name = "num_patch", type = "integer", required = true },
    { name = "num_patch_samples", type = "integer", required = true },
    { name = "rotation_max", type = "number", required = true },
    { name = "scale_min", type = "number", required = true },
    { name = "scale_max", type = "number", required = true },
    { name = "learning_rate", type = "number", required = true },
    { name = "max_iter", type = "integer", required = true },
  ]
  output_params = [ ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "augment_patch"
  input_params = [ 
    { name = "data_flow", type = "dataset", required = true},
    { name = "adv_data_dir", type = "str_path", required = true },
    { name = "patch_dir", type = "str_path", required = true },
    { name = "model", type = "model", required = true },
    { name = "distance_metrics", type = "list_mapping_str_str", required = true },
    { name = "batch_size", type = "integer", required = true },
    { name = "patch_scale", type = "number", required = true },
    { name = "rotation_max", type = "number", required = true },
    { name = "scale_min", type = "number", required = true },
    { name = "scale_max", type = "number", required = true },
  ]
  output_params = [ ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "model_metrics"
  input_params = [ 
    { name = "classifier", type = "model", required = true},
    { name = "dataset", type = "dataset", required = true },
  ]
  output_params = [ { name = "output", type = "mapping_str_float" } ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "prediction_metrics"
  input_params = [ 
    { name = "y_true", type = "null_np.ndarray", required = true},
    { name = "y_pred", type = "null_np.ndarray", required = true},
    { name = "metrics_list", type = "list_mapping_str_str", required = true},
    { name = "func_kwargs", type = "mapping_str_mapping_str_any", required = false},
  ]
  output_params = [ { name = "output", type = "dataframe" } ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "augment_data"
  input_params = [ 
    { name = "dataset", type = "dataset", required = true},
    { name = "def_data_dir", type = "str_path", required = true},
    { name = "image_size", type = "tuple_int_int_int", required = true},
    { name = "distance_metrics", type = "list_mapping_str_str", required = true},
    { name = "batch_size", type = "integer", required = false},
    { name = "def_type", type = "string", required = false},
    { name = "defense_kwargs", type = "null_mapping_str_any", required = false},
  ]
  output_params = [ { name = "output", type = "dataset" } ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "predict"
  input_params = [ 
    { name = "classifier", type = "model", required = true},
    { name = "dataset", type = "dataset", required = true},
    { name = "show_actual", type = "boolean", required = false},
    { name = "show_target", type = "boolean", required = false},
  ]
  output_params = [ { name = "output", type = "dataframe" } ]

  [[plugins.tasks]]
  filename = "plugins.py"
  name = "load_predictions"
  input_params = [ 
    { name = "paths", type = "list_str", required = true},
    { name = "filename", type = "string", required = true},
    { name = "format", type = "string", required = false},
    { name = "dataset", type = "null_dataset", required = false},
    { name = "n_classes", type = "integer", required = false},
  ]
  output_params = [ 
    { name = "y_true", type = "null_np.ndarray" }, 
    { name = "y_pred", type = "null_np.ndarray" }
  ]

[[plugin_param_types]]
name = "message"
description = "A message produced by a plugin task"

[[plugin_param_types]]
name = "list_str"
description = "list[str]"
structure = { list = "string" }

[[plugin_param_types]]
name = "tuple_int_int_int"
description = "tuple[int,int,int]"
structure = { tuple = ["integer", "integer", "integer"] }

[[plugin_param_types]]
name = "null_num"
description = "float | None"
structure = { union = ["number", "null"] }

[[plugin_param_types]]
name = "null_str"
description = "str | None"
structure = { union = ["string", "null"] }

[[plugin_param_types]]
name = "null_int"
description = "int | None"
structure = { union = ["integer", "null"] }

[[plugin_param_types]]
name = "null_dataset"
description = "Dataset | None"
structure = { union = ["dataset", "null"] }

[[plugin_param_types]]
name = "dataset"
description = "Dataset"

[[plugin_param_types]]
name = "name_parameters_mapping"
description = "name_parameters_mapping"
structure = { mapping = { name = "string", parameters = "mapping_str_str" } }

[[plugin_param_types]]
name = "name_parameters_callback_mapping"
description = "name_parameters_callback_mapping"
structure = { mapping = { name = "string", parameters = "mapping_str_any" } }

[[plugin_param_types]]
name = "metric_name_list"
description = "metric_name_list"
structure = { list = "name_parameters_mapping" }

[[plugin_param_types]]
name = "null_metric_name_list"
description = "null_metric_name_list"
structure = { union = ["metric_name_list", "null"] }


[[plugin_param_types]]
name = "callback_list"
description = "callback_list"
structure = { list = "name_parameters_callback_mapping" }

[[plugin_param_types]]
name = "null_callback_list"
description = "null_callback_list"
structure = { union = ["callback_list", "null"] }


[[plugin_param_types]]
name = "mapping_str_str"
description = "dict[str,str]"
structure = { mapping = ["string", "string"] }

[[plugin_param_types]]
name = "mapping_str_any"
description = "dict[str,any]"
structure = { mapping = ["string", "any"] }

[[plugin_param_types]]
name = "mapping_str_float"
description = "dict[str,float]"
structure = { mapping = ["string", "number"] }

[[plugin_param_types]]
name = "str_model"
description = "str | Model"
structure = { union = ["string", "model"] }

[[plugin_param_types]]
name = "mapping_str_str_model"
description = "dict[str, str|Model]"
structure = { mapping = ["string", "str_model"] }

[[plugin_param_types]]
name = "null_mapping_str_any"
description = "dict[str,any] | None"
structure = { union = ["mapping_str_any", "null"] }

[[plugin_param_types]]
name = "list_mapping_str_str_model"
description = "list[dict[str, str|Model]]"
structure = { list = "mapping_str_str_model" }

[[plugin_param_types]]
name = "null_list_mapping_str_str_model"
description = "list[dict[str, str|Model]] | None"
structure = { union = ["list_mapping_str_str_model", "null"] }


[[plugin_param_types]]
name = "list_mapping_str_any"
description = "list[dict[str, Any]]"
structure = { list = "mapping_str_any" }

[[plugin_param_types]]
name = "null_list_mapping_str_any"
description = "list[dict[str, Any]] | None"
structure = { union = ["list_mapping_str_any", "null"] }

[[plugin_param_types]]
name = "list_mapping_str_str"
description = "list[dict[str,str]]"
structure = { list = "mapping_str_str" }

[[plugin_param_types]]
name = "path"
description = "Path"

[[plugin_param_types]]
name = "str_path"
description = "str|Path"
structure = { union = ["string", "path"] }

[[plugin_param_types]]
name = "list_str_path"
description = "list[str|Path]"
structure = { list = "str_path" }

[[plugin_param_types]]
name = "null_list_str"
description = "list[str] | None"
structure = {  union = ["list_str", "null"] }

[[plugin_param_types]]
name = "null_list_int"
description = "list[int] | None"
structure = {  union = ["list_int", "null"] }

[[plugin_param_types]]
name = "list_int"
description = "list[int]"
structure = { list = "integer" }

[[plugin_param_types]]
name = "int_float_str"
description = "int | float | str"
structure = { union = ["integer", "number", "string"] }

[[plugin_param_types]]
name = "mapping_str_mapping_str_any"
description = "dict[str,dict[str,any]]"
structure = { mapping = ["string", "mapping_str_any"] }

[[plugin_param_types]]
name = "np.ndarray"
description = "np.ndarray"

[[plugin_param_types]]
name = "null_np.ndarray"
description = "np.ndarray | None"
structure = { union = ["np.ndarray", "null"] }

[[plugin_param_types]]
name = "model"
description = "classifier"

[[plugin_param_types]]
name = "dataframe"
description = "dataframe"


[[entrypoints]]
path = "entrypoints/hello-world.yaml"
name = "Hello World"
description = "A simple example using the hello_world plugin."
params = [
  { name = "name", type = "string", default_value = "World" }
]
plugins = [ "hello_world" ]


[[entrypoints]]
path = "entrypoints/train.yml"
name = "Train"
description = "Training an LeNet model on MNIST."
params = [
  { name = "seed", type = "integer", default_value = "-1" },
  { name = "optimizer_name", type = "string", default_value = "Adam" },
  { name = "learning_rate", type = "float", default_value = "0.001" },
  { name = "training_dir", type = "string", default_value = "/dioptra/data/Mnist/training" },
  { name = "testing_dir", type = "string", default_value = "/dioptra/data/Mnist/testing" },
  { name = "image_size", type = "list", default_value = "[28, 28, 1]" },
  { name = "validation_split", type = "float", default_value = "0.2" },
  { name = "batch_size", type = "integer", default_value = "50" },
  { name = "rescale", type = "float", default_value = "0.00392156862" },
  { name = "model_architecture", type = "string", default_value = "le_net" },
  { name = "epochs", type = "integer", default_value = "30" },
  { name = "register_model_name", type = "string", default_value = "mnist_classifier" }
]
plugins = [ "mnist_demo" ]

[[entrypoints]]
path = "entrypoints/fgm.yml"
name = "FGM"
description = "Running the FGM attack on an MNIST trained LeNet model."
params = [
  { name = "data_dir", type = "string", default_value = "/dioptra/data/Mnist/testing" },
  { name = "image_size", type = "list", default_value = "[28, 28, 1]" },
  { name = "adv_tar_name", type = "string", default_value = "testing_adversarial_fgm.tar.gz" },
  { name = "adv_data_dir", type = "string", default_value = "adv_testing" },
  { name = "distance_metrics_filename", type = "string", default_value = "distance_metrics.csv" },
  { name = "model_name", type = "string", default_value = "mnist_classifier" },
  { name = "model_version", type = "integer", default_value = "-1" },
  { name = "clip_values", type = "list", default_value = "[0, 1]" },
  { name = "batch_size", type = "integer", default_value = "50" },
  { name = "rescale", type = "float", default_value = "0.00392156862" },
  { name = "eps", type = "float", default_value = "0.3" },
  { name = "eps_step", type = "float", default_value = "0.1" },
  { name = "minimal", type = "boolean", default_value = "false" },
  { name = "norm", type = "string", default_value = "inf" },
  { name = "seed", type = "integer", default_value = "-1" }
]
plugins = [ "mnist_demo" ]

[[entrypoints]]
path = "entrypoints/patch_gen.yml"
name = "Patch Generation"
description = "Running the Patch attack on an MNIST trained LeNet model to generate patches."
params = [
  { name = "data_dir", type = "string", default_value = "/dioptra/data/Mnist/testing" },
  { name = "image_size", type = "list", default_value = "[28, 28, 1]" },
  { name = "adv_tar_name", type = "string", default_value = "adversarial_patch.tar.gz" },
  { name = "adv_data_dir", type = "string", default_value = "adv_patches" },
  { name = "model_name", type = "string", default_value = "mnist_classifier" },
  { name = "model_version", type = "integer", default_value = "-1" },
  { name = "clip_values", type = "list", default_value = "[0, 1]" },
  { name = "seed", type = "integer", default_value = "-1" },
  { name = "patch_target", type = "integer", default_value = "-1" },
  { name = "num_patch", type = "integer", default_value = "1" },
  { name = "rotation_max", type = "float", default_value = "22.5" },
  { name = "scale_min", type = "float", default_value = "0.1" },
  { name = "scale_max", type = "float", default_value = "1.0" },
  { name = "learning_rate", type = "float", default_value = "5.0" },
  { name = "max_iter", type = "integer", default_value = "500" },
  { name = "patch_shape", type = "list", default_value = "[2, 2, 1]" },
  { name = "batch_size", type = "integer", default_value = "10" },
  { name = "rescale", type = "float", default_value = "0.00392156862" },
]
plugins = [ "mnist_demo" ]

[[entrypoints]]
path = "entrypoints/patch_apply.yml"
name = "Patch Application"
description = "Applying a patch to the images in the dataset."
params = [
  { name = "data_dir", type = "string", default_value = "/dioptra/data/Mnist/testing" },
  { name = "image_size", type = "list", default_value = "[28, 28, 1]" },
  { name = "patch_dir", type = "string", default_value = "adv_patches" },
  { name = "adv_patch_tar_name", type = "string", default_value = "adversarial_patch.tar.gz" },
  { name = "adv_data_dir", type = "string", default_value = "adv_testing" },
  { name = "adv_dataset_tar_name", type = "string", default_value = "testing_adversarial_patch.tar.gz" },
  { name = "job_id", type = "string", default_value = "-1" },
  { name = "model_name", type = "string", default_value = "mnist_classifier" },
  { name = "model_version", type = "integer", default_value = "-1" },
  { name = "clip_values", type = "list", default_value = "[0, 1]" },
  { name = "seed", type = "integer", default_value = "-1" },
  { name = "rotation_max", type = "float", default_value = "22.5" },
  { name = "scale_min", type = "float", default_value = "0.1" },
  { name = "scale_max", type = "float", default_value = "1.0" },
  { name = "patch_scale", type = "float", default_value = "0.4" },
  { name = "patch_shape", type = "list", default_value = "[2, 2, 1]" },
  { name = "batch_size", type = "integer", default_value = "10" },
  { name = "rescale", type = "float", default_value = "0.00392156862" },
]
plugins = [ "mnist_demo" ]

[[entrypoints]]
path = "entrypoints/predict.yml"
name = "Predict"
description = "Get predictions from the model on the given dataset."
params = [
  { name = "image_size", type = "list", default_value = "[28, 28, 1]" },
  { name = "model_name", type = "string", default_value = "mnist_classifier" },
  { name = "model_version", type = "integer", default_value = "-1" },
  { name = "job_id", type = "string", default_value = "-1" },
  { name = "tar_name", type = "string", default_value = "testing_adversarial_fgm.tar.gz" },
  { name = "data_dir", type = "string", default_value = "adv_testing" },
  { name = "filename", type = "string", default_value = "predictions.csv" },
  { name = "record_actual_class", type = "boolean", default_value = "False" },
  { name = "record_target_class", type = "boolean", default_value = "False" },
  { name = "format", type = "string", default_value = "csv" },
  { name = "batch_size", type = "integer", default_value = "4"},
  { name = "seed", type = "integer", default_value = "-1" },
  { name = "rescale", type = "float", default_value = "0.00392156862" },
]
plugins = [ "mnist_demo" ]

[[entrypoints]]
path = "entrypoints/metrics.yml"
name = "Metrics"
description = "Get metrics based on the predictions and the actual classifications."
params = [
  { name = "image_size", type = "list", default_value = "[28, 28, 1]" },
  { name = "data_dir", type = "string", default_value = "/dioptra/data/Mnist/testing" },
  { name = "job_id", type = "string", default_value = "-1" },
  { name = "predictions_filename", type = "string", default_value = "predictions.csv" },
  { name = "predictions_format", type = "string", default_value = "csv" },
  { name = "metrics_filename", type = "string", default_value = "metrics.csv" },
  { name = "metrics_format", type = "string", default_value = "csv" },
  { name = "n_classes", type = "integer", default_value = "10" },
  { name = "seed", type = "integer", default_value = "-1" },
  { name = "rescale", type = "float", default_value = "0.00392156862" },
]
plugins = [ "mnist_demo" ]

[[entrypoints]]
path = "entrypoints/defense.yml"
name = "Defense"
description = "Perform defenses on a dataset."
params = [
  { name = "image_size", type = "list", default_value = "[28, 28, 1]" },
  { name = "job_id", type = "string", default_value = "-1" },
  { name = "patch_dir", type = "string", default_value = "adv_patches" },
  { name = "adv_tar_name", type = "string", default_value = "testing_adversarial_fgm.tar.gz" },
  { name = "adv_data_dir", type = "string", default_value = "adv_testing" },
  { name = "def_tar_name", type = "string", default_value = "testing_adversarial_def.tar.gz" },
  { name = "def_data_dir", type = "string", default_value = "def_testing" },
  { name = "distance_metrics_filename", type = "string", default_value = "distance_metrics.csv" },
  { name = "model_name", type = "string", default_value = "mnist_classifier" },
  { name = "model_version", type = "integer", default_value = "-1" },
  { name = "clip_values", type = "list", default_value = "[0, 1]" },
  { name = "batch_size", type = "integer", default_value = "10" },
  { name = "seed", type = "integer", default_value = "-1" },
  { name = "def_type", type = "string", default_value = "spatial_smothing" },
  { name = "defense_kwargs", type = "mapping", default_value = "{}"},
  { name = "rescale", type = "float", default_value = "0.00392156862" },
]
plugins = [ "mnist_demo" ]
